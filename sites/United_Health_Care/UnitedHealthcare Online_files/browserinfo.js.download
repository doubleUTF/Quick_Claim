
    function get_browser() {
        var N=navigator.appName;
        var ua=navigator.userAgent;
        var tem;
        var M=ua.match(/(opera|chrome|safari|firefox|msie)\/?\s*(\.?\d+(\.\d+)*)/i);
        if (M && (tem= ua.match(/version\/([\.\d]+)/i))!= null) {
            M[2]= tem[1];
        }
        M=M? [M[1], M[2]]: [N, navigator.appVersion, '-?'];
        return M[0];
    }

    function get_browser_version() {
        var N=navigator.appName;
        var ua=navigator.userAgent;
        var tem;
        var M=ua.match(/(opera|chrome|safari|firefox|msie)\/?\s*(\.?\d+(\.\d+)*)/i);
        if (M && (tem= ua.match(/version\/([\.\d]+)/i))!= null) {
            M[2]= tem[1];
        }
        M=M? [M[1], M[2]]: [N, navigator.appVersion, '-?'];
        return M[1];
    }

    
    function trueOrFalse() {
        return true;
    }

    function IeVersion() {
        //Set defaults
        var value = {
            IsIE: false,
            TrueVersion: 0,
            ActingVersion: 0,
            CompatibilityMode: false
        };

        //Try to find the Trident version number
        var trident = navigator.userAgent.match(/Trident\/(\d+)/);
        if (trident) {
            value.IsIE = true;
            //Convert from the Trident version number to the IE version number
            value.TrueVersion = parseInt(trident[1], 10) + 4;
        }

        //Try to find the MSIE number
        var msie = navigator.userAgent.match(/MSIE (\d+)/);
        if (msie) {
            value.IsIE = true;
            //Find the IE version number from the user agent string
            value.ActingVersion = parseInt(msie[1]);
        } else {
            //Must be IE 11 in "edge" mode
            value.ActingVersion = value.TrueVersion;
        }

        //If we have both a Trident and MSIE version number, see if they're different
        if (value.IsIE && value.TrueVersion > 0 && value.ActingVersion > 0) {
            //In compatibility mode if the trident number doesn't match up with the MSIE number
            value.CompatibilityMode = value.TrueVersion != value.ActingVersion;
        }
        return value;
    }
    
    function browserCheck(arg)
	{
	  var browser_type=get_browser();
	  var browser_version=get_browser_version();
	  var ie=IeVersion();
	   var compatible=ie.CompatibilityMode;
	   var actualVersion=ie.TrueVersion;
	   browser_version=browser_version.substring(0,browser_version.indexOf("."));
	   //for redirecting to LINK
	   if( ((compatible==false) && ((browser_type=="Netscape") || (browser_type=="MSIE" && browser_version>=8.0))) 
	   || (browser_type=="Firefox" && browser_version >= 31) || (browser_type=="Chrome" && browser_version >= 36) || (browser_type=="Safari" && browser_version >= 7)){
	   
	   window.location.href=arg;
	   } 
	   else
	   {
	   alert("You are using a browser version that is not supported by Link. To view a report for this member you must first update your browser.");
	   }
	   
	}

